import { Injectable } from '@angular/core';
import { Web3Service } from './web3.service';
import { ethers } from 'ethers';
import { BigNumber } from 'ethers/utils';
import { ConfigurationService } from './configuration.service';

import ERC20ABI from './abi/ERC20ABI.json';
import AutoGeneratedTokens from './config/tokens.json';
import TokenHelperABI from './abi/TokenHelper.json';

declare let require: any;

@Injectable({
    providedIn: 'root'
})
export class TokenService {

    public tokenWhiteList = {
        ETH: {
            symbol: 'ETH',
            name: 'Ethereum',
            decimals: 18,
            address: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE'
        },
        GST2: {
            symbol: 'GST2',
            name: 'Gastoken.io 2',
            decimals: 2,
            address: '0x0000000000b3F879cb30FE243b4Dfee438691c04'
        },
        CHAI: {
            symbol: 'CHAI',
            name: 'Chai Token',
            decimals: 18,
            address: '0x06af07097c9eeb7fd685c692751d5c66db49c215'
        },
        cBAT: {
            symbol: 'cBAT',
            name: 'Compound Basic Attention Token',
            decimals: 8,
            address: '0x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e'
        },
        cSAI: {
            symbol: 'cSAI',
            name: 'Compound Sai',
            decimals: 8,
            address: '0xf5dce57282a584d2746faf1593d3121fcac444dc'
        },
        cDAI: {
            symbol: 'cDAI',
            name: 'Compound Dai',
            decimals: 8,
            address: '0x5d3a536e4d6dbd6114cc1ead35777bab948e3643'
        },
        cETH: {
            symbol: 'cETH',
            name: 'Compound ETH',
            decimals: 8,
            address: '0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5'
        },
        cUSDC: {
            symbol: 'cUSDC',
            name: 'Compound USD Coin',
            decimals: 8,
            address: '0x39AA39c021dfbaE8faC545936693aC917d5E7563'
        },
        cREP: {
            symbol: 'cREP',
            name: 'Compound Augur',
            decimals: 8,
            address: '0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1'
        },
        cWBTC: {
            symbol: 'cWBTC',
            name: 'Compound Wrapped BTC',
            decimals: 8,
            address: '0xc11b1268c1a384e55c48c2391d8d480264a3a7f4'
        },
        cZRX: {
            symbol: 'cZRX',
            name: 'Compound 0x',
            decimals: 8,
            address: '0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407'
        },
        iDAI: {
            symbol: 'iDAI',
            name: 'bZx DAI iToken',
            decimals: 18,
            address: '0x493c57c4763932315a328269e1adad09653b9081'
        },
        iSAI: {
            symbol: 'iSAI',
            name: 'bZx SAI iToken',
            decimals: 18,
            address: '0x14094949152eddbfcd073717200da82fed8dc960'
        },
        iUSDC: {
            symbol: 'iUSDC',
            name: 'bZx USDC iToken',
            decimals: 6,
            address: '0xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'
        },
        iETH: {
            symbol: 'iETH',
            name: 'bZx ETH iToken',
            decimals: 18,
            address: '0x77f973FCaF871459aa58cd81881Ce453759281bC'
        },
        iWBTC: {
            symbol: 'iWBTC',
            name: 'bZx WBTC iToken',
            decimals: 8,
            address: '0xBA9262578EFef8b3aFf7F60Cd629d6CC8859C8b5'
        },
        iLINK: {
            symbol: 'iLINK',
            name: 'bZx LINK iToken',
            decimals: 18,
            address: '0x1D496da96caf6b518b133736beca85D5C4F9cBc5'
        },
        iZRX: {
            symbol: 'iZRX',
            name: 'bZx ZRX iToken',
            decimals: 18,
            address: '0xA7Eb2bc82df18013ecC2A6C533fc29446442EDEe'
        },
        iREP: {
            symbol: 'iREP',
            name: 'bZx REP iToken',
            decimals: 18,
            address: '0xBd56E9477Fc6997609Cf45F84795eFbDAC642Ff1'
        },
        iKNC: {
            symbol: 'iKNC',
            name: 'bZx KNC iToken',
            decimals: 18,
            address: '0x1cC9567EA2eB740824a45F8026cCF8e46973234D'
        },
        SNX: {
            symbol: 'SNX',
            name: 'Synthetix Network Token',
            decimals: 18,
            address: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f'
        },
        sETH: {
            symbol: 'sETH',
            name: 'Synth sETH',
            decimals: 18,
            address: '0x5e74c9036fb86bd7ecdcb084a0673efc32ea31cb'
        },
        LEO: {
            symbol: 'LEO',
            name: 'Bitfinex LEO Token',
            decimals: 18,
            address: '0x2af5d2ad76741191d15dfe7bf6ac92d4bd912ca3'
        },
        HT: {
            symbol: 'HT',
            name: 'HuobiToken',
            decimals: 18,
            address: '0x6f259637dcd74c767781e37bc6133cd6a68aa161'
        },
        NUSD: {
            symbol: 'NUSD',
            name: 'Token Neutral',
            decimals: 6,
            address: '0x0c6144c16af288948c8fdb37fd8fec94bff3d1d9'
        },
        MATIC: {
            symbol: 'MATIC',
            name: 'Matic Token',
            decimals: 18,
            address: '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0'
        },
        DZAR: {
            symbol: 'DZAR',
            name: 'Digital Rand',
            decimals: 6,
            address: '0x9cb2f26a23b8d89973f08c957c4d7cdf75cd341c'
        },
        MSDZAR: {
            symbol: 'MSDZAR',
            name: 'Multi Stable Token Digital Rand',
            decimals: 18,
            address: '0xec9ee41b316b7f335274c37ef17f8e34b1171df8'
        },
        MRR: {
            symbol: 'MRR',
            name: 'MarsReputation',
            decimals: 18,
            address: '0xf8b0d22608613a10916cc9d00c0de893e2b830e8'
        },
        DAI: {
            symbol: 'DAI',
            name: 'Dai Stablecoin',
            decimals: 18,
            address: '0x6b175474e89094c44da98b954eedeac495271d0f'
        },
        SAI: {
            symbol: 'SAI',
            name: 'Sai Stablecoin',
            decimals: 18,
            address: '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'
        },
        sUSD: {
            symbol: 'sUSD',
            name: 'Synth sUSD',
            decimals: 18,
            address: '0x57ab1ec28d129707052df4df418d58a2d46d5f51'
        },
        sEUR: {
            symbol: 'sEUR',
            name: 'Synth sEUR',
            decimals: 18,
            address: '0xd71ecff9342a5ced620049e616c5035f1db98620'
        },
        iBTC: {
            symbol: 'iBTC',
            name: 'Synth iBTC',
            decimals: 18,
            address: '0xd6014ea05bde904448b743833ddf07c3c7837481'
        },
        sMKR: {
            symbol: 'sMKR',
            name: 'Synth sMKR',
            decimals: 18,
            address: '0x4140919de11fce58e654cc6038017af97f810de1'
        },
        sBTC: {
            symbol: 'sBTC',
            name: 'Synth sBTC',
            decimals: 18,
            address: '0xfe18be6b3bd88a2d2a7f928d00292e7a9963cfc6'
        },
        sAUD: {
            symbol: 'sAUD',
            name: 'Synth sAUD',
            decimals: 18,
            address: '0xf48e200eaf9906362bb1442fca31e0835773b8b4'
        },
        sCEX: {
            symbol: 'sCEX',
            name: 'Synth sCEX',
            decimals: 18,
            address: '0xeabacd844a196d7faf3ce596edebf9900341b420'
        },
        iMKR: {
            symbol: 'iMKR',
            name: 'Synth iMKR',
            decimals: 18,
            address: '0x0794d09be5395f69534ff8151d72613077148b29'
        },
        iXRP: {
            symbol: 'iXRP',
            name: 'Synth iXRP',
            decimals: 18,
            address: '0x27269b3e45a4d3e79a3d6bfee0c8fb13d0d711a6'
        },
        iCEX: {
            symbol: 'iCEX',
            name: 'Synth iCEX',
            decimals: 18,
            address: '0x336213e1ddfc69f4701fc3f86f4ef4a160c1159d'
        },
        sCHF: {
            symbol: 'sCHF',
            name: 'Synth sCHF',
            decimals: 18,
            address: '0x0f83287ff768d1c1e17a42f44d644d7f22e8ee1d'
        },
        sJPY: {
            symbol: 'sJPY',
            name: 'Synth sJPY',
            decimals: 18,
            address: '0xf6b1c627e95bfc3c1b4c9b825a032ff0fbf3e07d'
        },
        sXAG: {
            symbol: 'sXAG',
            name: 'Synth sXAG',
            decimals: 18,
            address: '0x6a22e5e94388464181578aa7a6b869e00fe27846'
        },
        sTRX: {
            symbol: 'sTRX',
            name: 'Synth sTRX',
            decimals: 18,
            address: '0xf2e08356588ec5cd9e437552da87c0076b4970b0'
        },
        sLTC: {
            symbol: 'sLTC',
            name: 'Synth sLTC',
            decimals: 18,
            address: '0xc14103c2141e842e228fbac594579e798616ce7a'
        },
        siETH: {
            symbol: 'siETH',
            name: 'Synth iETH',
            decimals: 18,
            address: '0xa9859874e1743a32409f75bb11549892138bba1e'
        },
        iTRX: {
            symbol: 'iTRX',
            name: 'Synth iTRX',
            decimals: 18,
            address: '0xc5807183a9661a533cb08cbc297594a0b864dc12'
        },
        siLINK: {
            symbol: 'siLINK',
            name: 'Synth iLINK',
            decimals: 18,
            address: '0x2d7ac061fc3db53c39fe1607fb8cec1b2c162b01'
        },
        sDEFI: {
            symbol: 'sDEFI',
            name: 'Synth sDEFI',
            decimals: 18,
            address: '0xe1afe1fd76fd88f78cbf599ea1846231b8ba3b6b'
        },
        sGBP: {
            symbol: 'sGBP',
            name: 'Synth sGBP',
            decimals: 18,
            address: '0x97fe22e7341a0cd8db6f6c021a24dc8f4dad855f'
        },
        sXAU: {
            symbol: 'sXAU',
            name: 'Synth sXAU',
            decimals: 18,
            address: '0x261efcdd24cea98652b9700800a13dfbca4103ff'
        },
        sBNB: {
            symbol: 'sBNB',
            name: 'Synth sBNB',
            decimals: 18,
            address: '0x617aecb6137b5108d1e7d4918e3725c8cebdb848'
        },
        sXTZ: {
            symbol: 'sXTZ',
            name: 'Synth sXTZ',
            decimals: 18,
            address: '0x2e59005c5c0f0a4d77cca82653d48b46322ee5cd'
        },
        sLINK: {
            symbol: 'sLINK',
            name: 'Synth sLINK',
            decimals: 18,
            address: '0xbbc455cb4f1b9e4bfc4b73970d360c8f032efee6'
        },
        iBNB: {
            symbol: 'iBNB',
            name: 'Synth iBNB',
            decimals: 18,
            address: '0xafd870f32ce54efdbf677466b612bf8ad164454b'
        },
        iXTZ: {
            symbol: 'iXTZ',
            name: 'Synth iXTZ',
            decimals: 18,
            address: '0x8deef89058090ac5655a99eeb451a4f9183d1678'
        },
        iLTC: {
            symbol: 'iLTC',
            name: 'Synth iLTC',
            decimals: 18,
            address: '0x79da1431150c9b82d2e5dfc1c68b33216846851e'
        },
        iDEFI: {
            symbol: 'iDEFI',
            name: 'Synth iDEFI',
            decimals: 18,
            address: '0x14d10003807ac60d07bb0ba82caeac8d2087c157'
        },
        USDx: {
            symbol: 'USDx',
            name: 'dForce',
            decimals: 18,
            address: '0xeb269732ab75a6fd61ea60b06fe994cd32a83549'
        },
        TUSD: {
            symbol: 'TUSD',
            name: 'TrueUSD',
            decimals: 18,
            address: '0x0000000000085d4780b73119b644ae5ecd22b376'
        },
        BUSD: {
            symbol: 'BUSD',
            name: 'Binance USD',
            decimals: 18,
            address: '0x4fabb145d64652a948d72533023f6e7a623c7c53'
        },
        MET: {
            symbol: 'MET',
            name: 'Metronome',
            decimals: 18,
            address: '0xa3d58c4e56fedcae3a7c43a725aee9a71f0ece4e'
        },
        zBTC: {
            symbol: 'zBTC',
            name: 'Shifted BTC',
            decimals: 8,
            address: '0x88c64a7d2ecc882d558dd16abc1537515a78bb7d'
        },
        TLN: {
            symbol: 'TLN',
            name: 'Trustlines Network Token',
            decimals: 18,
            address: '0x679131F591B4f369acB8cd8c51E68596806c3916'
        },
        aETH: {
            symbol: 'aETH',
            name: 'Aave Interest bearing ETH',
            decimals: 18,
            address: '0x3a3a65aab0dd2a17e3f1947ba16138cd37d08c04'
        },
        aDAI: {
            symbol: 'aDAI',
            name: 'Aave Interest bearing DAI',
            decimals: 18,
            address: '0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d'
        },
        aUSDC: {
            symbol: 'aUSDC',
            name: 'Aave Interest bearing USDC',
            decimals: 6,
            address: '0x9bA00D6856a4eDF4665BcA2C2309936572473B7E'
        },
        aSUSD: {
            symbol: 'aSUSD',
            name: 'Aave Interest bearing SUSD',
            decimals: 18,
            address: '0x625ae63000f46200499120b906716420bd059240'
        },
        aTUSD: {
            symbol: 'aTUSD',
            name: 'Aave Interest bearing TUSD',
            decimals: 18,
            address: '0x4DA9b813057D04BAef4e5800E36083717b4a0341'
        },
        aUSDT: {
            symbol: 'aUSDT',
            name: 'Aave Interest bearing USDT',
            decimals: 6,
            address: '0x71fc860f7d3a592a4a98740e39db31d25db65ae8'
        },
        aBAT: {
            symbol: 'aBAT',
            name: 'Aave Interest bearing BAT',
            decimals: 18,
            address: '0xe1ba0fb44ccb0d11b80f92f4f8ed94ca3ff51d00'
        },
        aKNC: {
            symbol: 'aKNC',
            name: 'Aave Interest bearing KNC',
            decimals: 18,
            address: '0x9D91BE44C06d373a8a226E1f3b146956083803eB'
        },
        aLEND: {
            symbol: 'aLEND',
            name: 'Aave Interest bearing LEND',
            decimals: 18,
            address: '0x7D2D3688Df45Ce7C552E19c27e007673da9204B8'
        },
        aLINK: {
            symbol: 'aLINK',
            name: 'Aave Interest bearing LINK',
            decimals: 18,
            address: '0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84'
        },
        aMANA: {
            symbol: 'aMANA',
            name: 'Aave Interest bearing MANA',
            decimals: 18,
            address: '0x6FCE4A401B6B80ACe52baAefE4421Bd188e76F6f'
        },
        aMKR: {
            symbol: 'aMKR',
            name: 'Aave Interest bearing MKR',
            decimals: 18,
            address: '0x7deB5e830be29F91E298ba5FF1356BB7f8146998'
        },
        aREP: {
            symbol: 'aREP',
            name: 'Aave Interest bearing REP',
            decimals: 18,
            address: '0x71010A9D003445aC60C4e6A7017c1E89A477B438'
        },
        aSNX: {
            symbol: 'aSNX',
            name: 'Aave Interest bearing SNX',
            decimals: 18,
            address: '0x328C4c80BC7aCa0834Db37e6600A6c49E12Da4DE'
        },
        aWBTC: {
            symbol: 'aWBTC',
            name: 'Aave Interest bearing WBTC',
            decimals: 8,
            address: '0xFC4B8ED459e00e5400be803A9BB3954234FD50e3'
        },
        aZRX: {
            symbol: 'aZRX',
            name: 'Aave Interest bearing ZRX',
            decimals: 18,
            address: '0x6Fb0855c404E09c47C3fBCA25f08d4E41f9F062f'
        },
        TBC: {
            symbol: 'TBC',
            name: 'ThunderBoltCoin',
            decimals: 18,
            address: '0x627974847450c45b60b3fe3598f4e6e4cf945b9a'
        },
        BETH: {
            symbol: 'BETH',
            name: 'Bancor Ether Token',
            decimals: 18,
            address: '0xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315'
        },
        LMY: {
            symbol: 'LMY',
            name: 'Lunch Money',
            decimals: 18,
            address: '0x66fd97a78d8854fec445cd1c80a07896b0b4851f'
        },
        '4XB': {
            symbol: '4XB',
            name: '4xBit',
            decimals: 8,
            address: '0xa3ac41fde5f3a569fa79e81ffe6734ee8097ce9d'
        }
    };

    public tokens = AutoGeneratedTokens['symbol'];
    public _tokens = [];
    public tokensByAddress = AutoGeneratedTokens['address'];
    private tokenHelperContract;
    private re = {
        18: new RegExp('^-?\\d+(?:\.\\d{0,18})?'),
        8: new RegExp('^-?\\d+(?:\.\\d{0,8})?'),
        6: new RegExp('^-?\\d+(?:\.\\d{0,6})?'),
        2: new RegExp('^-?\\d+(?:\.\\d{0,2})?')
    };

    constructor(
        private web3Service: Web3Service,
        private configurationService: ConfigurationService
    ) {

        Object.keys(this.tokenWhiteList)
            .map((symbol) => {

                this.tokens[symbol] = this.tokenWhiteList[symbol];
                this.tokensByAddress[this.tokenWhiteList[symbol].address] = this.tokenWhiteList[symbol];
            });

        // @ts-ignore
        this._tokens = this.tokens;

        // console.log('this.tokens', Object.keys(this.tokens).length); // 390

        // this.tokens = this.sortObject(this.tokens);

        this.init();
    }

    async getTokens(): Promise<any> {

        return new Promise((resolve, reject) => {

            setTimeout(reject, 300000);

            const check = () => {

                if (this._tokens) {

                    resolve(this._tokens);
                    return;
                }

                setTimeout(() => {

                    check();
                }, 100);
            };

            check();
        });
    }

    async getTokenHelperContract(): Promise<any> {

        return new Promise((resolve, reject) => {

            setTimeout(reject, 300000);

            const check = () => {

                if (this.tokenHelperContract) {

                    resolve(this.tokenHelperContract);
                    return;
                }

                setTimeout(() => {

                    check();
                }, 100);
            };

            check();
        });
    }

    parseAsset(symbol: string, amount): BigNumber {

        if (symbol === 'ETH') {
            return ethers.utils.parseEther(this.toFixed(amount, 18));
        }

        const token = this.tokens[symbol];
        return ethers.utils.parseUnits(this.toFixed(amount, token.decimals), token.decimals);
    }

    parseUnits(amount, decimals): BigNumber {

        return ethers.utils.parseUnits(this.toFixed(amount, decimals), decimals);
    }

    // sortObject(o) {
    //     return Object.keys(o).sort().reduce((r, k) => (r[k] = o[k], r), {});
    // }

    toFixed(num, fixed) {

        if (!this.re[fixed]) {

            this.re[fixed] = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?');
        }

        return num.toString().match(this.re[fixed])[0];
    }

    getTokenByAddress(address: string) {

        return this.tokens[Object.keys(this.tokens).filter((value => {

            try {

                if (this.tokens[value].address.toLowerCase() === address.toLowerCase()) {

                    return true;
                }
            } catch (e) {

            }

            return false;
        }))[0]];
    }

    getTokenBySymbol(symbol: string) {

        return this.tokens[symbol];
    }

    getTokenSymbolByAddress(address: string): string {

        return this.getTokenByAddress(address)['symbol'];
    }

    formatAsset(symbol: string, amount: BigNumber): string {

        if (symbol === 'ETH' || symbol === 'WETH') {
            return this.formatUnits(amount, 18);
        }

        const token = this.tokens[symbol];

        if (!token || !token.decimals) {

            return amount.toString();
        } else {

            return this.formatUnits(amount, token.decimals);
        }
    }

    formatUnits(value: BigNumber, decimals: number) {

        const result = value.toString();

        if (!result || result === '0') {

            return '0';
        }

        const zeros = '000000000000000000000000000000000000000000000000000000000000000000000000';

        let start = '';
        let end = '';

        if (result.length > decimals) {

            start = result.slice(0, result.length - decimals);
            end = result.slice(result.length - decimals);

        } else {

            start = '0';
            end = zeros.slice(0, decimals - result.length) + result;
        }

        for (let i = end.length - 1; i >= 0; i--) {

            if (end[i] !== '0') {
                end = end.substr(0, i + 1);
                break;
            }

            // tslint:disable-next-line:triple-equals
            if (i == 0) {
                end = '';
            }
        }

        return start + (end.length ? '.' : '') + end;
    }

    async getTokenBalance(symbol: string, address: string): Promise<BigNumber> {

        if (symbol === 'ETH') {

            return ethers.utils.bigNumberify(
                await (await this.web3Service.getWeb3Provider()).eth.getBalance(address)
            );
        } else {

            const contract = new (await this.web3Service.getWeb3Provider()).eth.Contract(
                // @ts-ignore
                ERC20ABI,
                this.tokens[symbol].address
            );

            return ethers.utils.bigNumberify(
                await contract.methods.balanceOf(address).call()
            );
        }
    }

    async getTokenBalanceByAddress(
        symbol: string,
        walletAddress: string,
        tokenAddress: string
    ): Promise<BigNumber> {

        if (symbol === 'ETH') {

            return ethers.utils.bigNumberify(
                await (await this.web3Service.getWeb3Provider()).eth.getBalance(walletAddress)
            );
        } else {

            const contract = new this.web3Service.web3Provider.eth.Contract(
                ERC20ABI,
                tokenAddress
            );

            return ethers.utils.bigNumberify(
                await contract.methods.balanceOf(walletAddress).call()
            );
        }
    }

    async getERC20TokenBalanceByAddress(
        walletAddress: string,
        tokenAddress: string
    ): Promise<BigNumber> {

        const contract = new this.web3Service.web3Provider.eth.Contract(
            ERC20ABI,
            tokenAddress
        );

        return ethers.utils.bigNumberify(
            await contract.methods.balanceOf(walletAddress).call()
        );
    }

    async isApproved(
        tokenSymbol: string,
        spenderAddress: string,
        amount: BigNumber
    ) {

        if (tokenSymbol === 'ETH') {

            return true;
        }

        const contract = new (await this.web3Service.getWeb3Provider()).eth.Contract(
            // @ts-ignore
            ERC20ABI,
            this.tokens[tokenSymbol].address
        );

        return (await contract.methods.allowance(
            this.web3Service.walletAddress,
            spenderAddress
        ).call()).gte(amount);
    }

    async approve(
        tokenSymbol: string,
        spenderAddress: string,
        amount: BigNumber
    ) {

        const callData = this.web3Service.txProvider.eth.abi.encodeFunctionCall({
                'inputs': [
                    {
                        'name': '_spender',
                        'type': 'address'
                    },
                    {
                        'name': '_value',
                        'type': 'uint256'
                    }
                ],
                'name': 'approve',
                'type': 'function'
            },
            [
                spenderAddress,
                amount.gt(0) ? amount : ethers.utils.bigNumberify(2).pow(255)
            ]
        );

        const tx = this.web3Service.txProvider.eth.sendTransaction({
            from: this.web3Service.walletAddress,
            to: this.tokens[tokenSymbol].address,
            gasPrice: this.configurationService.fastGasPrice,
            data: callData
        });

        return new Promise((resolve, reject) => {

            let txHash;

            tx
                .once('transactionHash', async (hash) => {

                    txHash = hash;
                })
                .once('receipt', async (receipt) => {

                    resolve(txHash);
                })
                .on('confirmation', async (confirmation) => {

                    resolve(txHash);
                })
                .on('error', (err) => {

                    reject(err);
                });
        });
    }

    async approveAsync(
        tokenSymbol: string,
        spenderAddress: string,
        amount: BigNumber
    ) {

        const callData = this.web3Service.txProvider.eth.abi.encodeFunctionCall({
                'inputs': [
                    {
                        'name': '_spender',
                        'type': 'address'
                    },
                    {
                        'name': '_value',
                        'type': 'uint256'
                    }
                ],
                'name': 'approve',
                'type': 'function'
            },
            [
                spenderAddress,
                amount ? amount : ethers.utils.bigNumberify(2).pow(255)
            ]
        );

        const tx = this.web3Service.txProvider.eth.sendTransaction({
            from: this.web3Service.walletAddress,
            to: this.tokens[tokenSymbol].address,
            gasPrice: this.configurationService.fastGasPrice,
            data: callData
        });

        return new Promise((resolve, reject) => {

            tx
                .on('transactionHash', async (hash) => {

                    resolve(hash);
                })
                .on('error', (err) => {

                    reject(err);
                });
        });
    }

    toPrecision(
        amount: string | number,
        precision: number
    ) {

        return Number(amount).toFixed(precision)
            .replace(/([0-9]+(\.[0-9]+[1-9])?)(\.?0+$)/, '$1');
    }

    public async getTokenBalancesAndPrices(
        userWalletAddress: string
    ) {

        return this.getTokenBalancesAndPricesForTokens(
            userWalletAddress,
            this.tokens
        );
    }

    public async getTokenBalancesAndPricesForTokens(
        userWalletAddress: string,
        tokens: any
    ) {

        await this.web3Service.getWeb3Provider();

        const addresses = Object.keys(tokens).map(symbol => tokens[symbol].address);
        const result = {
            prices: [],
            balances: []
        };
        const promises = [];
        let index = 0;
        const step = addresses.length;

        do {

            promises.push(await (await this.getTokenHelperContract()).methods.balancesOfTokens(
                userWalletAddress,
                addresses.slice(index, index + step),
                this.configurationService.ONE_SPLIT_CONTRACT_ADDRESS
                ).call()
            );

            index += step;
        } while (addresses.slice(index, index + step).length);

        (await Promise.all(promises)).forEach(value => {

            result['prices'] = result['prices'].concat(...value.prices);
            result['balances'] = result['balances'].concat(...value.balances);
        });

        return result;
    }

    public isNumeric(str) {
        return /^\d*\.{0,1}\d*$/.test(str);
    }

    private async init() {

        this.tokenHelperContract = new (await this.web3Service.getWeb3Provider()).eth.Contract(
            // @ts-ignore
            TokenHelperABI,
            this.configurationService.TOKEN_HELPER_CONTRACT_ADDRESS
        );
    }
}
